// js/admin.js
// Load room list
async function loadRooms(isAdmin) {
    const roomsContainer = isAdmin ? 
        document.getElementById('adminRoomsList') : 
        document.getElementById('playerRoomsList');
    
    roomsContainer.innerHTML = '<p>ƒêang t·∫£i danh s√°ch ph√≤ng...</p>';
    
    try {
        const gamesRef = db.ref('games');
        const snapshot = await gamesRef.once('value');
        
        if (!snapshot.exists()) {
            roomsContainer.innerHTML = '<p>Kh√¥ng c√≥ ph√≤ng n√†o.</p>';
            return;
        }
        
        let games = snapshot.val();
        let roomCount = 0;
        
        // Sort rooms by creation time (newest first)
        const sortedRooms = Object.entries(games)
            .sort(([,a], [,b]) => (b.createdAt || 0) - (a.createdAt || 0));
        
        roomsContainer.innerHTML = '';
        
        for (let [code, game] of sortedRooms) {
            roomCount++;
            let playerCount = game.playerCount || 0;
            let currentCount = game.players ? Object.keys(game.players).length : 0;
            let loggedCount = game.loggedPlayers ? Object.keys(game.loggedPlayers).length : 0;
            
            let roomItem = document.createElement('div');
            roomItem.className = 'room-item';
            
            // Add voting status if available
            let votingStatus = '';
            if (game.voting && game.voting.active) {
                votingStatus = ' <span style="color: var(--voting-color);">[ƒêang b·ªè phi·∫øu]</span>';
            }

            // Add game status info
            let gameStatus = '';
            if (game.gameEnded) {
                gameStatus = ' <span style="color: var(--danger-color);">[ƒê√£ k·∫øt th√∫c]</span>';
            } else if (game.gameStarted) {
                gameStatus = ' <span style="color: var(--primary-color);">[ƒê√£ b·∫Øt ƒë·∫ßu]</span>';
            } else {
                gameStatus = ' <span style="color: var(--warning-color);">[Ch·ªù b·∫Øt ƒë·∫ßu]</span>';
            }
            
            let roomInfo = document.createElement('div');
            roomInfo.className = 'room-info';
            roomInfo.innerHTML = `
                <div>Ph√≤ng: <span class="room-code">${code}</span>${gameStatus}${votingStatus}</div>
                <div>Ng∆∞·ªùi ch∆°i: ${currentCount}/${playerCount} (ƒêƒÉng nh·∫≠p: ${loggedCount})</div>
                <div>T·∫°o l√∫c: ${new Date(game.createdAt).toLocaleString()}</div>
            `;
            
            let roomActions = document.createElement('div');
            roomActions.className = 'room-actions';
            
            if (isAdmin) {
                // Actions for game master
                let viewButton = document.createElement('button');
                viewButton.innerText = 'Xem';
                viewButton.onclick = function() { viewRoles(code); };
                
                let deleteButton = document.createElement('button');
                deleteButton.innerText = 'X√≥a';
                deleteButton.className = 'delete';
                deleteButton.onclick = function() { deleteRoom(code); };
                
                roomActions.appendChild(viewButton);
                roomActions.appendChild(deleteButton);
            }
            
            roomItem.appendChild(roomInfo);
            roomItem.appendChild(roomActions);
            roomsContainer.appendChild(roomItem);
        }
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch ph√≤ng:', error);
        roomsContainer.innerHTML = '<p>ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.</p>';
    }
}

// View roles (game master)
function viewRoles(code) {
    let gameCode = code || document.getElementById('adminGameCode').value.toUpperCase();
    
    if (!gameCode) {
        alert('Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn m·ªôt ph√≤ng!');
        return;
    }
    
    currentGameCode = gameCode;
    document.getElementById('adminCurrentRoom').textContent = gameCode;
    document.getElementById('adminGameInfo').classList.remove('hidden');
    
    // Stop previous listener if exists
    if (playersListener) {
        playersListener.off();
    }
    
    // Start listening to changes in the room
    playersListener = db.ref('games/' + gameCode);
    playersListener.on('value', (snapshot) => {
        if (snapshot.exists()) {
            let gameData = snapshot.val();
            updateAdminView(gameData);
            loadNightNotes(gameData);
            loadVotingData(gameData);
        } else {
            alert('Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!');
            document.getElementById('adminGameInfo').classList.add('hidden');
        }
    });
}

// Update admin UI
function updateAdminView(game) {
    let playerCount = game.playerCount || 0;
    let currentCount = game.players ? Object.keys(game.players).length : 0;
    let loggedPlayersCount = game.loggedPlayers ? Object.keys(game.loggedPlayers).length : 0;
    
    document.getElementById('adminCurrentPlayers').textContent = currentCount;
    document.getElementById('adminTotalPlayers').textContent = playerCount;
    document.getElementById('loggedPlayersCount').textContent = loggedPlayersCount;
    
    // Update button states
    const startGameButton = document.getElementById('startGameButton');
    const endGameButton = document.getElementById('endGameButton');
    const gameStarted = game.gameStarted || false;
    const gameEnded = game.gameEnded || false;
    
    if (gameStarted && !gameEnded) {
        // Game is in progress
        startGameButton.textContent = 'Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu';
        startGameButton.disabled = true;
        endGameButton.textContent = 'K·∫øt Th√∫c Tr√≤ Ch∆°i';
        endGameButton.disabled = false;
    } else if (gameEnded) {
        // Game has ended
        startGameButton.textContent = 'B·∫Øt ƒê·∫ßu L·∫°i';
        startGameButton.disabled = false;
        endGameButton.textContent = 'Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c';
        endGameButton.disabled = true;
    } else {
        // Game has not started
        startGameButton.textContent = 'B·∫Øt ƒê·∫ßu';
        startGameButton.disabled = false;
        endGameButton.textContent = 'K·∫øt Th√∫c Tr√≤ Ch∆°i';
        endGameButton.disabled = true;
    }
    
    // Change color based on ratio
    let statusBar = document.getElementById('adminStatus');
    if (currentCount == playerCount) {
        statusBar.className = 'status-bar full';
    } else if (currentCount == 0) {
        statusBar.className = 'status-bar empty';
    } else {
        statusBar.className = 'status-bar';
    }
    
    // Display roles in a table
    const tableContainer = document.getElementById('roleTableContainer');
    
    if (!game.players || Object.keys(game.players).length === 0) {
        tableContainer.innerHTML = '<p>Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o tham gia.</p>';
        return;
    }
    
    // Create HTML table
    let tableHTML = `
        <table class="role-table">
            <thead>
                <tr>
                    <th>T√™n ng∆∞·ªùi ch∆°i</th>
                    <th>Vai tr√≤</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thao t√°c</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    // Add player data
    Object.entries(game.players).forEach(([player, playerData]) => {
        // Get role and status info
        let role, status, roleRevealed;
        if (typeof playerData === 'object') {
            role = playerData.role || 'Kh√¥ng x√°c ƒë·ªãnh';
            status = playerData.status || 'alive';
            roleRevealed = playerData.roleRevealed || false;
        } else {
            role = playerData;
            status = 'alive';
            roleRevealed = false;
        }
        
        // Check if player is logged in
        const isLoggedIn = game.loggedPlayers && game.loggedPlayers[player];
        
        // Determine CSS classes based on state
        // S·ª≠a l·ªói: ƒê·∫£m b·∫£o class "dead" ƒë∆∞·ª£c √°p d·ª•ng ƒë√∫ng c√°ch
        const rowClass = status === 'dead' ? 'dead' : '';
        const statusText = status === 'dead' ? 'ƒê√£ ch·∫øt' : 'C√≤n s·ªëng';
        const statusClass = status === 'dead' ? 'dead-status' : '';
        
        // Add login status icon
        const loginStatus = isLoggedIn ? 
            '<span style="color: green; margin-left: 5px;">‚úì</span>' : 
            '<span style="color: red; margin-left: 5px;">‚úó</span>';
        
        tableHTML += `
            <tr class="${rowClass}">
                <td>${player} ${loginStatus}</td>
                <td>${role} ${!roleRevealed ? '<span style="color: orange;">(Ch∆∞a hi·ªán)</span>' : ''}</td>
                <td>
                    <span class="player-status ${statusClass}">${statusText}</span>
                </td>
                <td>
                    <div class="player-actions">
                        ${status === 'alive' ? 
                            `<button class="icon delete" title="ƒê√°nh d·∫•u ƒë√£ ch·∫øt" onclick="togglePlayerStatus('${player}', 'dead')">‚ò†Ô∏è</button>` : 
                            `<button class="icon" title="ƒê√°nh d·∫•u c√≤n s·ªëng" onclick="togglePlayerStatus('${player}', 'alive')">‚ù§Ô∏è</button>`
                        }
                        <button class="icon warning" title="ƒêu·ªïi kh·ªèi ph√≤ng" onclick="kickPlayer('${player}')">üö´</button>
                    </div>
                </td>
            </tr>
        `;
    });
    
    tableHTML += `
            </tbody>
        </table>
    `;
    
    tableContainer.innerHTML = tableHTML;
}

// Mark player as dead/alive
async function togglePlayerStatus(playerName, newStatus) {
    if (!currentGameCode || !playerName) {
        alert('Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi ch∆°i!');
        return;
    }
    
    const action = newStatus === 'dead' ? 'ƒë√£ ch·∫øt' : 'c√≤n s·ªëng';
    
    showConfirmModal(
        'C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi ch∆°i',
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√°nh d·∫•u "${playerName}" l√† ${action}?`,
        async function() {
            try {
                const playerRef = db.ref(`games/${currentGameCode}/players/${playerName}`);
                const snapshot = await playerRef.once('value');
                
                if (!snapshot.exists()) {
                    alert('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i n√†y!');
                    return;
                }
                
                const playerData = snapshot.val();
                
                // Update player status
                if (typeof playerData === 'object') {
                    // Already using new format, just update status
                    await playerRef.update({ status: newStatus });
                } else {
                    // Old format, update to new structure
                    await playerRef.set({
                        role: playerData,
                        status: newStatus
                    });
                }
                
                alert(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa "${playerName}" th√†nh ${action}.`);
                
            } catch (error) {
                console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi ch∆°i:', error);
                alert('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi ch∆°i!');
            }
        }
    );
}

// Kick player from room
async function kickPlayer(playerName) {
    if (!currentGameCode || !playerName) {
        alert('Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi ch∆°i!');
        return;
    }
    
    showConfirmModal(
        'ƒêu·ªïi ng∆∞·ªùi ch∆°i',
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëu·ªïi "${playerName}" kh·ªèi ph√≤ng?`,
        async function() {
            try {
                // Remove player from players list
                await db.ref(`games/${currentGameCode}/players/${playerName}`).remove();
                
                // Remove player from logged in players list
                await db.ref(`games/${currentGameCode}/loggedPlayers/${playerName}`).remove();
                
                alert(`ƒê√£ ƒëu·ªïi "${playerName}" kh·ªèi ph√≤ng th√†nh c√¥ng.`);
            } catch (error) {
                console.error('L·ªói khi ƒëu·ªïi ng∆∞·ªùi ch∆°i:', error);
                alert('ƒê√£ x·∫£y ra l·ªói khi ƒëu·ªïi ng∆∞·ªùi ch∆°i!');
            }
        }
    );
}

// Delete room
async function deleteRoom(code) {
    if (!code) {
        alert('Kh√¥ng c√≥ m√£ ph√≤ng!');
        return;
    }
    
    showConfirmModal(
        'X√≥a ph√≤ng',
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng ${code}?`,
        async function() {
            try {
                // Delete room
                await db.ref('games/' + code).remove();
                
                if (code === currentGameCode) {
                    currentGameCode = '';
                    document.getElementById('adminGameInfo').classList.add('hidden');
                }
                
                loadRooms(true);
                alert('ƒê√£ x√≥a ph√≤ng th√†nh c√¥ng!');
            } catch (error) {
                console.error('L·ªói khi x√≥a ph√≤ng:', error);
                alert('L·ªói khi x√≥a ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i!');
            }
        }
    );
}

// Delete current room
function deleteCurrentRoom() {
    if (currentGameCode) {
        deleteRoom(currentGameCode);
    } else {
        alert('Kh√¥ng c√≥ ph√≤ng n√†o ƒë∆∞·ª£c ch·ªçn!');
    }
}

// Load sheets data
async function fetchSheetsData() {
    try {
        document.getElementById('sheetsStatus').innerHTML = `
            <div class="loader"></div>
            <p>ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets...</p>
        `;
        
        // Load data from Google Sheets
        const response = await fetch(SHEET_URL);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const csvData = await response.text();
        
        // Parse CSV using PapaParse
        const parsed = Papa.parse(csvData, { header: false });
        
        if (parsed.errors.length > 0) {
            throw new Error('L·ªói parse CSV: ' + parsed.errors[0].message);
        }
        
        // Filter valid data - starting from row 2 (index 1)
        const validData = [];
        
        for (let i = 1; i < parsed.data.length; i++) {
            const row = parsed.data[i];
            
            // Ensure data exists in column A (password), column L (name) and column D (role)
            if (row[0] && row[11] && row[3]) {
                validData.push({
                    password: row[0],     // Column A - password
                    playerName: row[11],  // Column L - player name
                    role: row[3]          // Column D - role
                });
            }
        }
        
        sheetsData = validData;
        
        document.getElementById('sheetsStatus').innerHTML = `
            <p style="color: green;">‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!</p>
            <p>S·ªë ng∆∞·ªùi ch∆°i: ${sheetsData.length}</p>
            <p>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${new Date().toLocaleString()}</p>
        `;
        
        console.log('Sheet data loaded:', sheetsData);
        
        // Enable game creation button if there's data
        if (sheetsData.length > 0) {
            document.getElementById('createGameBtn').disabled = false;
        }
        
        return sheetsData;
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets:', error);
        document.getElementById('sheetsStatus').innerHTML = `
            <p style="color: red;">‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu!</p>
            <p>${error.message}</p>
            <p>Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh v√† th·ª≠ l·∫°i.</p>
        `;
        return [];
    }
}

// Refresh Google Sheets data
async function refreshSheetsData() {
    const data = await fetchSheetsData();
    if (data && data.length > 0) {
        alert(`ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu th√†nh c√¥ng! S·ªë ng∆∞·ªùi ch∆°i: ${data.length}`);
    }
}